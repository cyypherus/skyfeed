---
source: src/public_api_test.rs
expression: public_api
---
pub mod skyfeed
pub enum skyfeed::Embed
pub skyfeed::Embed::External(skyfeed::ExternalEmbed)
pub skyfeed::Embed::Images(alloc::vec::Vec<skyfeed::ImageEmbed>)
pub skyfeed::Embed::Quote(skyfeed::QuoteEmbed)
pub skyfeed::Embed::QuoteWithMedia(skyfeed::QuoteEmbed, skyfeed::MediaEmbed)
pub skyfeed::Embed::Video(skyfeed::VideoEmbed)
impl core::clone::Clone for skyfeed::Embed
pub fn skyfeed::Embed::clone(&self) -> skyfeed::Embed
impl core::fmt::Debug for skyfeed::Embed
pub fn skyfeed::Embed::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::Embed
impl core::marker::Send for skyfeed::Embed
impl core::marker::Sync for skyfeed::Embed
impl core::marker::Unpin for skyfeed::Embed
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Embed
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Embed
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Embed where P: core::default::Default
pub fn skyfeed::Embed::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Embed
pub fn skyfeed::Embed::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Embed where U: core::convert::From<T>
pub fn skyfeed::Embed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Embed where U: core::convert::Into<T>
pub type skyfeed::Embed::Error = core::convert::Infallible
pub fn skyfeed::Embed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Embed where U: core::convert::TryFrom<T>
pub type skyfeed::Embed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Embed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Embed where T: core::clone::Clone
pub type skyfeed::Embed::Owned = T
pub fn skyfeed::Embed::clone_into(&self, target: &mut T)
pub fn skyfeed::Embed::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Embed where T: 'static + ?core::marker::Sized
pub fn skyfeed::Embed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Embed where T: ?core::marker::Sized
pub fn skyfeed::Embed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Embed where T: ?core::marker::Sized
pub fn skyfeed::Embed::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Embed where T: core::clone::Clone
pub unsafe fn skyfeed::Embed::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Embed
pub fn skyfeed::Embed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Embed
pub type skyfeed::Embed::Init = T
pub const skyfeed::Embed::ALIGN: usize
pub unsafe fn skyfeed::Embed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Embed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Embed::drop(ptr: usize)
pub unsafe fn skyfeed::Embed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Embed
impl<T> tracing::instrument::Instrument for skyfeed::Embed
impl<T> tracing::instrument::WithSubscriber for skyfeed::Embed
impl<T> typenum::type_operators::Same for skyfeed::Embed
pub type skyfeed::Embed::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Embed where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Embed where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Embed::vzip(self) -> V
pub enum skyfeed::Label
pub skyfeed::Label::GraphicMedia
pub skyfeed::Label::Hide
pub skyfeed::Label::NoUnauthenticated
pub skyfeed::Label::Nudity
pub skyfeed::Label::Other(alloc::string::String)
pub skyfeed::Label::Porn
pub skyfeed::Label::Sexual
pub skyfeed::Label::Warn
impl core::clone::Clone for skyfeed::Label
pub fn skyfeed::Label::clone(&self) -> skyfeed::Label
impl core::cmp::Eq for skyfeed::Label
impl core::cmp::PartialEq for skyfeed::Label
pub fn skyfeed::Label::eq(&self, other: &skyfeed::Label) -> bool
impl core::convert::From<alloc::string::String> for skyfeed::Label
pub fn skyfeed::Label::from(value: alloc::string::String) -> Self
impl core::fmt::Debug for skyfeed::Label
pub fn skyfeed::Label::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for skyfeed::Label
impl core::marker::Freeze for skyfeed::Label
impl core::marker::Send for skyfeed::Label
impl core::marker::Sync for skyfeed::Label
impl core::marker::Unpin for skyfeed::Label
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Label
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Label
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Label where P: core::default::Default
pub fn skyfeed::Label::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<Q, K> equivalent::Equivalent<K> for skyfeed::Label where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn skyfeed::Label::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for skyfeed::Label where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for skyfeed::Label where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn skyfeed::Label::equivalent(&self, key: &K) -> bool
pub fn skyfeed::Label::equivalent(&self, key: &K) -> bool
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Label
pub fn skyfeed::Label::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Label where U: core::convert::From<T>
pub fn skyfeed::Label::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Label where U: core::convert::Into<T>
pub type skyfeed::Label::Error = core::convert::Infallible
pub fn skyfeed::Label::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Label where U: core::convert::TryFrom<T>
pub type skyfeed::Label::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Label::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Label where T: core::clone::Clone
pub type skyfeed::Label::Owned = T
pub fn skyfeed::Label::clone_into(&self, target: &mut T)
pub fn skyfeed::Label::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Label where T: 'static + ?core::marker::Sized
pub fn skyfeed::Label::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Label where T: ?core::marker::Sized
pub fn skyfeed::Label::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Label where T: ?core::marker::Sized
pub fn skyfeed::Label::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Label where T: core::clone::Clone
pub unsafe fn skyfeed::Label::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Label
pub fn skyfeed::Label::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Label
pub type skyfeed::Label::Init = T
pub const skyfeed::Label::ALIGN: usize
pub unsafe fn skyfeed::Label::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Label::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Label::drop(ptr: usize)
pub unsafe fn skyfeed::Label::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Label
impl<T> tracing::instrument::Instrument for skyfeed::Label
impl<T> tracing::instrument::WithSubscriber for skyfeed::Label
impl<T> typenum::type_operators::Same for skyfeed::Label
pub type skyfeed::Label::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Label where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Label where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Label::vzip(self) -> V
pub enum skyfeed::MediaEmbed
pub skyfeed::MediaEmbed::External(skyfeed::ExternalEmbed)
pub skyfeed::MediaEmbed::Images(alloc::vec::Vec<skyfeed::ImageEmbed>)
pub skyfeed::MediaEmbed::Video(skyfeed::VideoEmbed)
impl core::clone::Clone for skyfeed::MediaEmbed
pub fn skyfeed::MediaEmbed::clone(&self) -> skyfeed::MediaEmbed
impl core::fmt::Debug for skyfeed::MediaEmbed
pub fn skyfeed::MediaEmbed::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::MediaEmbed
impl core::marker::Send for skyfeed::MediaEmbed
impl core::marker::Sync for skyfeed::MediaEmbed
impl core::marker::Unpin for skyfeed::MediaEmbed
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::MediaEmbed
impl core::panic::unwind_safe::UnwindSafe for skyfeed::MediaEmbed
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::MediaEmbed where P: core::default::Default
pub fn skyfeed::MediaEmbed::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::MediaEmbed
pub fn skyfeed::MediaEmbed::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::MediaEmbed where U: core::convert::From<T>
pub fn skyfeed::MediaEmbed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::MediaEmbed where U: core::convert::Into<T>
pub type skyfeed::MediaEmbed::Error = core::convert::Infallible
pub fn skyfeed::MediaEmbed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::MediaEmbed where U: core::convert::TryFrom<T>
pub type skyfeed::MediaEmbed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::MediaEmbed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::MediaEmbed where T: core::clone::Clone
pub type skyfeed::MediaEmbed::Owned = T
pub fn skyfeed::MediaEmbed::clone_into(&self, target: &mut T)
pub fn skyfeed::MediaEmbed::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::MediaEmbed where T: 'static + ?core::marker::Sized
pub fn skyfeed::MediaEmbed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::MediaEmbed where T: ?core::marker::Sized
pub fn skyfeed::MediaEmbed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::MediaEmbed where T: ?core::marker::Sized
pub fn skyfeed::MediaEmbed::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::MediaEmbed where T: core::clone::Clone
pub unsafe fn skyfeed::MediaEmbed::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::MediaEmbed
pub fn skyfeed::MediaEmbed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::MediaEmbed
pub type skyfeed::MediaEmbed::Init = T
pub const skyfeed::MediaEmbed::ALIGN: usize
pub unsafe fn skyfeed::MediaEmbed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::MediaEmbed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::MediaEmbed::drop(ptr: usize)
pub unsafe fn skyfeed::MediaEmbed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::MediaEmbed
impl<T> tracing::instrument::Instrument for skyfeed::MediaEmbed
impl<T> tracing::instrument::WithSubscriber for skyfeed::MediaEmbed
impl<T> typenum::type_operators::Same for skyfeed::MediaEmbed
pub type skyfeed::MediaEmbed::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::MediaEmbed where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::MediaEmbed where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::MediaEmbed::vzip(self) -> V
pub struct skyfeed::Cid(pub alloc::string::String)
impl core::clone::Clone for skyfeed::Cid
pub fn skyfeed::Cid::clone(&self) -> skyfeed::Cid
impl core::fmt::Debug for skyfeed::Cid
pub fn skyfeed::Cid::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::Cid
impl core::marker::Send for skyfeed::Cid
impl core::marker::Sync for skyfeed::Cid
impl core::marker::Unpin for skyfeed::Cid
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Cid
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Cid
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Cid where P: core::default::Default
pub fn skyfeed::Cid::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Cid
pub fn skyfeed::Cid::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Cid where U: core::convert::From<T>
pub fn skyfeed::Cid::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Cid where U: core::convert::Into<T>
pub type skyfeed::Cid::Error = core::convert::Infallible
pub fn skyfeed::Cid::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Cid where U: core::convert::TryFrom<T>
pub type skyfeed::Cid::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Cid::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Cid where T: core::clone::Clone
pub type skyfeed::Cid::Owned = T
pub fn skyfeed::Cid::clone_into(&self, target: &mut T)
pub fn skyfeed::Cid::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Cid where T: 'static + ?core::marker::Sized
pub fn skyfeed::Cid::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Cid where T: ?core::marker::Sized
pub fn skyfeed::Cid::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Cid where T: ?core::marker::Sized
pub fn skyfeed::Cid::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Cid where T: core::clone::Clone
pub unsafe fn skyfeed::Cid::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Cid
pub fn skyfeed::Cid::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Cid
pub type skyfeed::Cid::Init = T
pub const skyfeed::Cid::ALIGN: usize
pub unsafe fn skyfeed::Cid::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Cid::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Cid::drop(ptr: usize)
pub unsafe fn skyfeed::Cid::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Cid
impl<T> tracing::instrument::Instrument for skyfeed::Cid
impl<T> tracing::instrument::WithSubscriber for skyfeed::Cid
impl<T> typenum::type_operators::Same for skyfeed::Cid
pub type skyfeed::Cid::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Cid where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Cid where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Cid::vzip(self) -> V
pub struct skyfeed::Did(pub alloc::string::String)
impl core::clone::Clone for skyfeed::Did
pub fn skyfeed::Did::clone(&self) -> skyfeed::Did
impl core::fmt::Debug for skyfeed::Did
pub fn skyfeed::Did::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::Did
impl core::marker::Send for skyfeed::Did
impl core::marker::Sync for skyfeed::Did
impl core::marker::Unpin for skyfeed::Did
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Did
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Did
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Did where P: core::default::Default
pub fn skyfeed::Did::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Did
pub fn skyfeed::Did::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Did where U: core::convert::From<T>
pub fn skyfeed::Did::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Did where U: core::convert::Into<T>
pub type skyfeed::Did::Error = core::convert::Infallible
pub fn skyfeed::Did::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Did where U: core::convert::TryFrom<T>
pub type skyfeed::Did::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Did::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Did where T: core::clone::Clone
pub type skyfeed::Did::Owned = T
pub fn skyfeed::Did::clone_into(&self, target: &mut T)
pub fn skyfeed::Did::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Did where T: 'static + ?core::marker::Sized
pub fn skyfeed::Did::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Did where T: ?core::marker::Sized
pub fn skyfeed::Did::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Did where T: ?core::marker::Sized
pub fn skyfeed::Did::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Did where T: core::clone::Clone
pub unsafe fn skyfeed::Did::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Did
pub fn skyfeed::Did::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Did
pub type skyfeed::Did::Init = T
pub const skyfeed::Did::ALIGN: usize
pub unsafe fn skyfeed::Did::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Did::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Did::drop(ptr: usize)
pub unsafe fn skyfeed::Did::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Did
impl<T> tracing::instrument::Instrument for skyfeed::Did
impl<T> tracing::instrument::WithSubscriber for skyfeed::Did
impl<T> typenum::type_operators::Same for skyfeed::Did
pub type skyfeed::Did::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Did where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Did where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Did::vzip(self) -> V
pub struct skyfeed::ExternalEmbed
pub skyfeed::ExternalEmbed::description: alloc::string::String
pub skyfeed::ExternalEmbed::thumbnail: core::option::Option<skyfeed::Cid>
pub skyfeed::ExternalEmbed::title: alloc::string::String
pub skyfeed::ExternalEmbed::uri: alloc::string::String
impl core::clone::Clone for skyfeed::ExternalEmbed
pub fn skyfeed::ExternalEmbed::clone(&self) -> skyfeed::ExternalEmbed
impl core::fmt::Debug for skyfeed::ExternalEmbed
pub fn skyfeed::ExternalEmbed::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::ExternalEmbed
impl core::marker::Send for skyfeed::ExternalEmbed
impl core::marker::Sync for skyfeed::ExternalEmbed
impl core::marker::Unpin for skyfeed::ExternalEmbed
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::ExternalEmbed
impl core::panic::unwind_safe::UnwindSafe for skyfeed::ExternalEmbed
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::ExternalEmbed where P: core::default::Default
pub fn skyfeed::ExternalEmbed::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::ExternalEmbed
pub fn skyfeed::ExternalEmbed::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::ExternalEmbed where U: core::convert::From<T>
pub fn skyfeed::ExternalEmbed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::ExternalEmbed where U: core::convert::Into<T>
pub type skyfeed::ExternalEmbed::Error = core::convert::Infallible
pub fn skyfeed::ExternalEmbed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::ExternalEmbed where U: core::convert::TryFrom<T>
pub type skyfeed::ExternalEmbed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::ExternalEmbed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::ExternalEmbed where T: core::clone::Clone
pub type skyfeed::ExternalEmbed::Owned = T
pub fn skyfeed::ExternalEmbed::clone_into(&self, target: &mut T)
pub fn skyfeed::ExternalEmbed::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::ExternalEmbed where T: 'static + ?core::marker::Sized
pub fn skyfeed::ExternalEmbed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::ExternalEmbed where T: ?core::marker::Sized
pub fn skyfeed::ExternalEmbed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::ExternalEmbed where T: ?core::marker::Sized
pub fn skyfeed::ExternalEmbed::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::ExternalEmbed where T: core::clone::Clone
pub unsafe fn skyfeed::ExternalEmbed::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::ExternalEmbed
pub fn skyfeed::ExternalEmbed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::ExternalEmbed
pub type skyfeed::ExternalEmbed::Init = T
pub const skyfeed::ExternalEmbed::ALIGN: usize
pub unsafe fn skyfeed::ExternalEmbed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::ExternalEmbed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::ExternalEmbed::drop(ptr: usize)
pub unsafe fn skyfeed::ExternalEmbed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::ExternalEmbed
impl<T> tracing::instrument::Instrument for skyfeed::ExternalEmbed
impl<T> tracing::instrument::WithSubscriber for skyfeed::ExternalEmbed
impl<T> typenum::type_operators::Same for skyfeed::ExternalEmbed
pub type skyfeed::ExternalEmbed::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::ExternalEmbed where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::ExternalEmbed where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::ExternalEmbed::vzip(self) -> V
pub struct skyfeed::FeedResult
pub skyfeed::FeedResult::cursor: core::option::Option<alloc::string::String>
pub skyfeed::FeedResult::feed: alloc::vec::Vec<skyfeed::Uri>
impl core::clone::Clone for skyfeed::FeedResult
pub fn skyfeed::FeedResult::clone(&self) -> skyfeed::FeedResult
impl core::fmt::Debug for skyfeed::FeedResult
pub fn skyfeed::FeedResult::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::FeedResult
impl core::marker::Send for skyfeed::FeedResult
impl core::marker::Sync for skyfeed::FeedResult
impl core::marker::Unpin for skyfeed::FeedResult
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::FeedResult
impl core::panic::unwind_safe::UnwindSafe for skyfeed::FeedResult
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::FeedResult where P: core::default::Default
pub fn skyfeed::FeedResult::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::FeedResult
pub fn skyfeed::FeedResult::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::FeedResult where U: core::convert::From<T>
pub fn skyfeed::FeedResult::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::FeedResult where U: core::convert::Into<T>
pub type skyfeed::FeedResult::Error = core::convert::Infallible
pub fn skyfeed::FeedResult::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::FeedResult where U: core::convert::TryFrom<T>
pub type skyfeed::FeedResult::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::FeedResult::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::FeedResult where T: core::clone::Clone
pub type skyfeed::FeedResult::Owned = T
pub fn skyfeed::FeedResult::clone_into(&self, target: &mut T)
pub fn skyfeed::FeedResult::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::FeedResult where T: 'static + ?core::marker::Sized
pub fn skyfeed::FeedResult::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::FeedResult where T: ?core::marker::Sized
pub fn skyfeed::FeedResult::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::FeedResult where T: ?core::marker::Sized
pub fn skyfeed::FeedResult::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::FeedResult where T: core::clone::Clone
pub unsafe fn skyfeed::FeedResult::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::FeedResult
pub fn skyfeed::FeedResult::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::FeedResult
pub type skyfeed::FeedResult::Init = T
pub const skyfeed::FeedResult::ALIGN: usize
pub unsafe fn skyfeed::FeedResult::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::FeedResult::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::FeedResult::drop(ptr: usize)
pub unsafe fn skyfeed::FeedResult::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::FeedResult
impl<T> tracing::instrument::Instrument for skyfeed::FeedResult
impl<T> tracing::instrument::WithSubscriber for skyfeed::FeedResult
impl<T> typenum::type_operators::Same for skyfeed::FeedResult
pub type skyfeed::FeedResult::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::FeedResult where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::FeedResult where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::FeedResult::vzip(self) -> V
pub struct skyfeed::ImageEmbed
pub skyfeed::ImageEmbed::alt_text: alloc::string::String
pub skyfeed::ImageEmbed::cid: skyfeed::Cid
pub skyfeed::ImageEmbed::mime_type: alloc::string::String
impl core::clone::Clone for skyfeed::ImageEmbed
pub fn skyfeed::ImageEmbed::clone(&self) -> skyfeed::ImageEmbed
impl core::fmt::Debug for skyfeed::ImageEmbed
pub fn skyfeed::ImageEmbed::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::ImageEmbed
impl core::marker::Send for skyfeed::ImageEmbed
impl core::marker::Sync for skyfeed::ImageEmbed
impl core::marker::Unpin for skyfeed::ImageEmbed
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::ImageEmbed
impl core::panic::unwind_safe::UnwindSafe for skyfeed::ImageEmbed
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::ImageEmbed where P: core::default::Default
pub fn skyfeed::ImageEmbed::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::ImageEmbed
pub fn skyfeed::ImageEmbed::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::ImageEmbed where U: core::convert::From<T>
pub fn skyfeed::ImageEmbed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::ImageEmbed where U: core::convert::Into<T>
pub type skyfeed::ImageEmbed::Error = core::convert::Infallible
pub fn skyfeed::ImageEmbed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::ImageEmbed where U: core::convert::TryFrom<T>
pub type skyfeed::ImageEmbed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::ImageEmbed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::ImageEmbed where T: core::clone::Clone
pub type skyfeed::ImageEmbed::Owned = T
pub fn skyfeed::ImageEmbed::clone_into(&self, target: &mut T)
pub fn skyfeed::ImageEmbed::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::ImageEmbed where T: 'static + ?core::marker::Sized
pub fn skyfeed::ImageEmbed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::ImageEmbed where T: ?core::marker::Sized
pub fn skyfeed::ImageEmbed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::ImageEmbed where T: ?core::marker::Sized
pub fn skyfeed::ImageEmbed::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::ImageEmbed where T: core::clone::Clone
pub unsafe fn skyfeed::ImageEmbed::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::ImageEmbed
pub fn skyfeed::ImageEmbed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::ImageEmbed
pub type skyfeed::ImageEmbed::Init = T
pub const skyfeed::ImageEmbed::ALIGN: usize
pub unsafe fn skyfeed::ImageEmbed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::ImageEmbed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::ImageEmbed::drop(ptr: usize)
pub unsafe fn skyfeed::ImageEmbed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::ImageEmbed
impl<T> tracing::instrument::Instrument for skyfeed::ImageEmbed
impl<T> tracing::instrument::WithSubscriber for skyfeed::ImageEmbed
impl<T> typenum::type_operators::Same for skyfeed::ImageEmbed
pub type skyfeed::ImageEmbed::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::ImageEmbed where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::ImageEmbed where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::ImageEmbed::vzip(self) -> V
pub struct skyfeed::Post
pub skyfeed::Post::author_did: skyfeed::Did
pub skyfeed::Post::cid: skyfeed::Cid
pub skyfeed::Post::embed: core::option::Option<skyfeed::Embed>
pub skyfeed::Post::labels: alloc::vec::Vec<skyfeed::Label>
pub skyfeed::Post::langs: alloc::vec::Vec<alloc::string::String>
pub skyfeed::Post::text: alloc::string::String
pub skyfeed::Post::timestamp: chrono::datetime::DateTime<chrono::offset::utc::Utc>
pub skyfeed::Post::uri: skyfeed::Uri
impl core::clone::Clone for skyfeed::Post
pub fn skyfeed::Post::clone(&self) -> skyfeed::Post
impl core::fmt::Debug for skyfeed::Post
pub fn skyfeed::Post::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::Post
impl core::marker::Send for skyfeed::Post
impl core::marker::Sync for skyfeed::Post
impl core::marker::Unpin for skyfeed::Post
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Post
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Post
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Post where P: core::default::Default
pub fn skyfeed::Post::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Post
pub fn skyfeed::Post::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Post where U: core::convert::From<T>
pub fn skyfeed::Post::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Post where U: core::convert::Into<T>
pub type skyfeed::Post::Error = core::convert::Infallible
pub fn skyfeed::Post::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Post where U: core::convert::TryFrom<T>
pub type skyfeed::Post::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Post::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Post where T: core::clone::Clone
pub type skyfeed::Post::Owned = T
pub fn skyfeed::Post::clone_into(&self, target: &mut T)
pub fn skyfeed::Post::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Post where T: 'static + ?core::marker::Sized
pub fn skyfeed::Post::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Post where T: ?core::marker::Sized
pub fn skyfeed::Post::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Post where T: ?core::marker::Sized
pub fn skyfeed::Post::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Post where T: core::clone::Clone
pub unsafe fn skyfeed::Post::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Post
pub fn skyfeed::Post::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Post
pub type skyfeed::Post::Init = T
pub const skyfeed::Post::ALIGN: usize
pub unsafe fn skyfeed::Post::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Post::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Post::drop(ptr: usize)
pub unsafe fn skyfeed::Post::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Post
impl<T> tracing::instrument::Instrument for skyfeed::Post
impl<T> tracing::instrument::WithSubscriber for skyfeed::Post
impl<T> typenum::type_operators::Same for skyfeed::Post
pub type skyfeed::Post::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Post where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Post where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Post::vzip(self) -> V
pub struct skyfeed::QuoteEmbed
pub skyfeed::QuoteEmbed::cid: skyfeed::Cid
pub skyfeed::QuoteEmbed::uri: alloc::string::String
impl core::clone::Clone for skyfeed::QuoteEmbed
pub fn skyfeed::QuoteEmbed::clone(&self) -> skyfeed::QuoteEmbed
impl core::fmt::Debug for skyfeed::QuoteEmbed
pub fn skyfeed::QuoteEmbed::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::QuoteEmbed
impl core::marker::Send for skyfeed::QuoteEmbed
impl core::marker::Sync for skyfeed::QuoteEmbed
impl core::marker::Unpin for skyfeed::QuoteEmbed
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::QuoteEmbed
impl core::panic::unwind_safe::UnwindSafe for skyfeed::QuoteEmbed
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::QuoteEmbed where P: core::default::Default
pub fn skyfeed::QuoteEmbed::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::QuoteEmbed
pub fn skyfeed::QuoteEmbed::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::QuoteEmbed where U: core::convert::From<T>
pub fn skyfeed::QuoteEmbed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::QuoteEmbed where U: core::convert::Into<T>
pub type skyfeed::QuoteEmbed::Error = core::convert::Infallible
pub fn skyfeed::QuoteEmbed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::QuoteEmbed where U: core::convert::TryFrom<T>
pub type skyfeed::QuoteEmbed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::QuoteEmbed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::QuoteEmbed where T: core::clone::Clone
pub type skyfeed::QuoteEmbed::Owned = T
pub fn skyfeed::QuoteEmbed::clone_into(&self, target: &mut T)
pub fn skyfeed::QuoteEmbed::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::QuoteEmbed where T: 'static + ?core::marker::Sized
pub fn skyfeed::QuoteEmbed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::QuoteEmbed where T: ?core::marker::Sized
pub fn skyfeed::QuoteEmbed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::QuoteEmbed where T: ?core::marker::Sized
pub fn skyfeed::QuoteEmbed::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::QuoteEmbed where T: core::clone::Clone
pub unsafe fn skyfeed::QuoteEmbed::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::QuoteEmbed
pub fn skyfeed::QuoteEmbed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::QuoteEmbed
pub type skyfeed::QuoteEmbed::Init = T
pub const skyfeed::QuoteEmbed::ALIGN: usize
pub unsafe fn skyfeed::QuoteEmbed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::QuoteEmbed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::QuoteEmbed::drop(ptr: usize)
pub unsafe fn skyfeed::QuoteEmbed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::QuoteEmbed
impl<T> tracing::instrument::Instrument for skyfeed::QuoteEmbed
impl<T> tracing::instrument::WithSubscriber for skyfeed::QuoteEmbed
impl<T> typenum::type_operators::Same for skyfeed::QuoteEmbed
pub type skyfeed::QuoteEmbed::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::QuoteEmbed where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::QuoteEmbed where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::QuoteEmbed::vzip(self) -> V
pub struct skyfeed::Request
pub skyfeed::Request::cursor: core::option::Option<alloc::string::String>
pub skyfeed::Request::feed: alloc::string::String
pub skyfeed::Request::limit: core::option::Option<u8>
impl core::clone::Clone for skyfeed::Request
pub fn skyfeed::Request::clone(&self) -> skyfeed::Request
impl core::fmt::Debug for skyfeed::Request
pub fn skyfeed::Request::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::Request
impl core::marker::Send for skyfeed::Request
impl core::marker::Sync for skyfeed::Request
impl core::marker::Unpin for skyfeed::Request
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Request
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Request
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Request where P: core::default::Default
pub fn skyfeed::Request::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Request
pub fn skyfeed::Request::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Request where U: core::convert::From<T>
pub fn skyfeed::Request::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Request where U: core::convert::Into<T>
pub type skyfeed::Request::Error = core::convert::Infallible
pub fn skyfeed::Request::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Request where U: core::convert::TryFrom<T>
pub type skyfeed::Request::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Request::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Request where T: core::clone::Clone
pub type skyfeed::Request::Owned = T
pub fn skyfeed::Request::clone_into(&self, target: &mut T)
pub fn skyfeed::Request::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Request where T: 'static + ?core::marker::Sized
pub fn skyfeed::Request::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Request where T: ?core::marker::Sized
pub fn skyfeed::Request::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Request where T: ?core::marker::Sized
pub fn skyfeed::Request::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Request where T: core::clone::Clone
pub unsafe fn skyfeed::Request::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Request
pub fn skyfeed::Request::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Request
pub type skyfeed::Request::Init = T
pub const skyfeed::Request::ALIGN: usize
pub unsafe fn skyfeed::Request::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Request::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Request::drop(ptr: usize)
pub unsafe fn skyfeed::Request::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Request
impl<T> tracing::instrument::Instrument for skyfeed::Request
impl<T> tracing::instrument::WithSubscriber for skyfeed::Request
impl<T> typenum::type_operators::Same for skyfeed::Request
pub type skyfeed::Request::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Request where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Request where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Request::vzip(self) -> V
pub struct skyfeed::Uri(pub alloc::string::String)
impl core::clone::Clone for skyfeed::Uri
pub fn skyfeed::Uri::clone(&self) -> skyfeed::Uri
impl core::cmp::Eq for skyfeed::Uri
impl core::cmp::PartialEq for skyfeed::Uri
pub fn skyfeed::Uri::eq(&self, other: &skyfeed::Uri) -> bool
impl core::fmt::Debug for skyfeed::Uri
pub fn skyfeed::Uri::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for skyfeed::Uri
pub fn skyfeed::Uri::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for skyfeed::Uri
impl core::marker::Freeze for skyfeed::Uri
impl core::marker::Send for skyfeed::Uri
impl core::marker::Sync for skyfeed::Uri
impl core::marker::Unpin for skyfeed::Uri
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::Uri
impl core::panic::unwind_safe::UnwindSafe for skyfeed::Uri
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::Uri where P: core::default::Default
pub fn skyfeed::Uri::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<Q, K> equivalent::Equivalent<K> for skyfeed::Uri where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn skyfeed::Uri::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for skyfeed::Uri where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for skyfeed::Uri where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn skyfeed::Uri::equivalent(&self, key: &K) -> bool
pub fn skyfeed::Uri::equivalent(&self, key: &K) -> bool
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::Uri
pub fn skyfeed::Uri::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::Uri where U: core::convert::From<T>
pub fn skyfeed::Uri::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::Uri where U: core::convert::Into<T>
pub type skyfeed::Uri::Error = core::convert::Infallible
pub fn skyfeed::Uri::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::Uri where U: core::convert::TryFrom<T>
pub type skyfeed::Uri::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::Uri::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::Uri where T: core::clone::Clone
pub type skyfeed::Uri::Owned = T
pub fn skyfeed::Uri::clone_into(&self, target: &mut T)
pub fn skyfeed::Uri::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::Uri where T: 'static + ?core::marker::Sized
pub fn skyfeed::Uri::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::Uri where T: ?core::marker::Sized
pub fn skyfeed::Uri::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::Uri where T: ?core::marker::Sized
pub fn skyfeed::Uri::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::Uri where T: core::clone::Clone
pub unsafe fn skyfeed::Uri::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::Uri
pub fn skyfeed::Uri::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::Uri
pub type skyfeed::Uri::Init = T
pub const skyfeed::Uri::ALIGN: usize
pub unsafe fn skyfeed::Uri::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::Uri::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::Uri::drop(ptr: usize)
pub unsafe fn skyfeed::Uri::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::Uri
impl<T> tracing::instrument::Instrument for skyfeed::Uri
impl<T> tracing::instrument::WithSubscriber for skyfeed::Uri
impl<T> typenum::type_operators::Same for skyfeed::Uri
pub type skyfeed::Uri::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::Uri where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::Uri where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::Uri::vzip(self) -> V
pub struct skyfeed::VideoEmbed
pub skyfeed::VideoEmbed::alt_text: alloc::string::String
pub skyfeed::VideoEmbed::cid: skyfeed::Cid
impl core::clone::Clone for skyfeed::VideoEmbed
pub fn skyfeed::VideoEmbed::clone(&self) -> skyfeed::VideoEmbed
impl core::fmt::Debug for skyfeed::VideoEmbed
pub fn skyfeed::VideoEmbed::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for skyfeed::VideoEmbed
impl core::marker::Send for skyfeed::VideoEmbed
impl core::marker::Sync for skyfeed::VideoEmbed
impl core::marker::Unpin for skyfeed::VideoEmbed
impl core::panic::unwind_safe::RefUnwindSafe for skyfeed::VideoEmbed
impl core::panic::unwind_safe::UnwindSafe for skyfeed::VideoEmbed
impl<P, T> atrium_common::types::throttled::Throttleable<P> for skyfeed::VideoEmbed where P: core::default::Default
pub fn skyfeed::VideoEmbed::throttled(self) -> atrium_common::types::throttled::Throttled<T, P>
impl<T, C> atrium_common::types::cached::Cacheable<C> for skyfeed::VideoEmbed
pub fn skyfeed::VideoEmbed::cached(self, cache: C) -> atrium_common::types::cached::Cached<T, C>
impl<T, U> core::convert::Into<U> for skyfeed::VideoEmbed where U: core::convert::From<T>
pub fn skyfeed::VideoEmbed::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for skyfeed::VideoEmbed where U: core::convert::Into<T>
pub type skyfeed::VideoEmbed::Error = core::convert::Infallible
pub fn skyfeed::VideoEmbed::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for skyfeed::VideoEmbed where U: core::convert::TryFrom<T>
pub type skyfeed::VideoEmbed::Error = <U as core::convert::TryFrom<T>>::Error
pub fn skyfeed::VideoEmbed::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for skyfeed::VideoEmbed where T: core::clone::Clone
pub type skyfeed::VideoEmbed::Owned = T
pub fn skyfeed::VideoEmbed::clone_into(&self, target: &mut T)
pub fn skyfeed::VideoEmbed::to_owned(&self) -> T
impl<T> core::any::Any for skyfeed::VideoEmbed where T: 'static + ?core::marker::Sized
pub fn skyfeed::VideoEmbed::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for skyfeed::VideoEmbed where T: ?core::marker::Sized
pub fn skyfeed::VideoEmbed::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for skyfeed::VideoEmbed where T: ?core::marker::Sized
pub fn skyfeed::VideoEmbed::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for skyfeed::VideoEmbed where T: core::clone::Clone
pub unsafe fn skyfeed::VideoEmbed::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for skyfeed::VideoEmbed
pub fn skyfeed::VideoEmbed::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for skyfeed::VideoEmbed
pub type skyfeed::VideoEmbed::Init = T
pub const skyfeed::VideoEmbed::ALIGN: usize
pub unsafe fn skyfeed::VideoEmbed::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn skyfeed::VideoEmbed::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn skyfeed::VideoEmbed::drop(ptr: usize)
pub unsafe fn skyfeed::VideoEmbed::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> icu_provider::any::MaybeSendSync for skyfeed::VideoEmbed
impl<T> tracing::instrument::Instrument for skyfeed::VideoEmbed
impl<T> tracing::instrument::WithSubscriber for skyfeed::VideoEmbed
impl<T> typenum::type_operators::Same for skyfeed::VideoEmbed
pub type skyfeed::VideoEmbed::Output = T
impl<T> yoke::erased::ErasedDestructor for skyfeed::VideoEmbed where T: 'static
impl<V, T> ppv_lite86::types::VZip<V> for skyfeed::VideoEmbed where V: ppv_lite86::types::MultiLane<T>
pub fn skyfeed::VideoEmbed::vzip(self) -> V
pub trait skyfeed::Feed<Handler: skyfeed::FeedHandler + core::clone::Clone + core::marker::Send + core::marker::Sync + 'static>
pub fn skyfeed::Feed::handler(&mut self) -> Handler
pub fn skyfeed::Feed::start(&mut self, name: impl core::convert::AsRef<str>, address: impl core::convert::Into<core::net::socket_addr::SocketAddr> + core::fmt::Debug + core::clone::Clone + core::marker::Send) -> impl core::future::future::Future<Output = ()> + core::marker::Send
pub fn skyfeed::Feed::start_with_config(&mut self, name: impl core::convert::AsRef<str>, config: skyfeed::config::Config, address: impl core::convert::Into<core::net::socket_addr::SocketAddr> + core::fmt::Debug + core::clone::Clone + core::marker::Send) -> impl core::future::future::Future<Output = ()> + core::marker::Send
pub trait skyfeed::FeedHandler
pub fn skyfeed::FeedHandler::delete_like(&mut self, like_uri: skyfeed::Uri) -> impl core::future::future::Future<Output = ()> + core::marker::Send
pub fn skyfeed::FeedHandler::delete_post(&mut self, uri: skyfeed::Uri) -> impl core::future::future::Future<Output = ()> + core::marker::Send
pub fn skyfeed::FeedHandler::insert_post(&mut self, post: skyfeed::Post) -> impl core::future::future::Future<Output = ()> + core::marker::Send
pub fn skyfeed::FeedHandler::like_post(&mut self, like_uri: skyfeed::Uri, liked_post_uri: skyfeed::Uri) -> impl core::future::future::Future<Output = ()> + core::marker::Send
pub fn skyfeed::FeedHandler::serve_feed(&self, request: skyfeed::Request) -> impl core::future::future::Future<Output = skyfeed::FeedResult> + core::marker::Send
